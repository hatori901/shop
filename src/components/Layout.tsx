import { Fragment, useEffect, useState } from "react";
import Head from "next/head";
import Link from "next/link";
import { Dialog, Transition } from "@headlessui/react";
import {
	Bars3BottomLeftIcon,
	HomeIcon,
	CubeIcon,
	XMarkIcon,
	ShoppingCartIcon,
} from "@heroicons/react/24/outline";
import { MagnifyingGlassIcon } from "@heroicons/react/20/solid";
import { APIHelper } from "@/helpers/APIHelper";
import { classNames, debounce } from "@/helpers/Formatter";

interface Props {
	children: React.ReactNode;
	title: string;
}

export default function Layout(props: Props) {
	const [sidebarOpen, setSidebarOpen] = useState(false);
	const [navigation, setNavigation] = useState([
		{ name: "Dashboard", href: "/", icon: HomeIcon, current: false },
		{ name: "Products", href: "/products", icon: CubeIcon, current: false },
		{ name: "Carts", href: "/carts", icon: ShoppingCartIcon, current: false },
	]);
	const [products, setProducts] = useState<any>([]);
	const [searchValue, setSearchValue] = useState("");
	const [filteredData, setFilteredData] = useState<any>({
		data: [],
		isSearch: false,
		resultFound: false,
	});

	const filterData = () => {
		let fData: any[] = [];
		if (searchValue.length > 0) {
			fData = products.filter((item: any) => {
				return item.title.toLowerCase().includes(searchValue.toLowerCase());
			});
		}
		console.log(fData);
		setFilteredData({
			data: fData,
			isSearch: true,
			resultFound: fData.length > 0,
		});
	};
	useEffect(() => {
		APIHelper.getProducts().then((res) => {
			setProducts(res.data.products);
		});
	}, []);

	useEffect(() => {
		filterData();
	}, [searchValue]);

	return (
		<>
			<Head>
				<title>Shop</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div>
				<Transition.Root show={sidebarOpen} as={Fragment}>
					<Dialog
						as="div"
						className="relative z-40 md:hidden"
						onClose={setSidebarOpen}
					>
						<Transition.Child
							as={Fragment}
							enter="transition-opacity ease-linear duration-300"
							enterFrom="opacity-0"
							enterTo="opacity-100"
							leave="transition-opacity ease-linear duration-300"
							leaveFrom="opacity-100"
							leaveTo="opacity-0"
						>
							<div className="fixed inset-0 bg-gray-600 bg-opacity-75" />
						</Transition.Child>

						<div className="fixed inset-0 z-40 flex">
							<Transition.Child
								as={Fragment}
								enter="transition ease-in-out duration-300 transform"
								enterFrom="-translate-x-full"
								enterTo="translate-x-0"
								leave="transition ease-in-out duration-300 transform"
								leaveFrom="translate-x-0"
								leaveTo="-translate-x-full"
							>
								<Dialog.Panel className="relative flex w-full max-w-xs flex-1 flex-col bg-indigo-700 pt-5 pb-4">
									<Transition.Child
										as={Fragment}
										enter="ease-in-out duration-300"
										enterFrom="opacity-0"
										enterTo="opacity-100"
										leave="ease-in-out duration-300"
										leaveFrom="opacity-100"
										leaveTo="opacity-0"
									>
										<div className="absolute top-0 right-0 -mr-12 pt-2">
											<button
												type="button"
												className="ml-1 flex h-10 w-10 items-center justify-center rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
												onClick={() => setSidebarOpen(false)}
											>
												<span className="sr-only">Close sidebar</span>
												<XMarkIcon
													className="h-6 w-6 text-white"
													aria-hidden="true"
												/>
											</button>
										</div>
									</Transition.Child>
									<div className="text-center text-white text-2xl">Shop</div>
									<div className="mt-5 h-0 flex-1 overflow-y-auto">
										<nav className="space-y-1 px-2">
											{navigation.map((item) => (
												<Link
													href={item.href}
													key={item.name}
													onClick={() =>
														setNavigation(
															navigation.map((nav) => {
																if (nav.name === item.name) {
																	nav.current = true;
																} else {
																	nav.current = false;
																}
																return nav;
															})
														)
													}
												>
													<div
														className={classNames(
															item.current
																? "bg-indigo-800 text-white"
																: "text-indigo-100 hover:bg-indigo-600",
															"group flex items-center px-2 py-2 text-base font-medium rounded-md"
														)}
													>
														<item.icon
															className="mr-4 h-6 w-6 flex-shrink-0 text-indigo-300"
															aria-hidden="true"
														/>
														{item.name}
													</div>
												</Link>
											))}
										</nav>
									</div>
								</Dialog.Panel>
							</Transition.Child>
							<div className="w-14 flex-shrink-0" aria-hidden="true">
								{/* Dummy element to force sidebar to shrink to fit close icon */}
							</div>
						</div>
					</Dialog>
				</Transition.Root>

				{/* Static sidebar for desktop */}
				<div className="hidden md:fixed md:inset-y-0 md:flex md:w-64 md:flex-col">
					{/* Sidebar component, swap this element with another sidebar if you like */}
					<div className="flex flex-grow flex-col overflow-y-auto bg-indigo-700 pt-5">
						<div className="text-center text-white text-2xl">Shop</div>
						<div className="mt-5 flex flex-1 flex-col">
							<nav className="flex-1 space-y-1 px-2 pb-4">
								{navigation.map((item) => (
									<Link
										href={item.href}
										key={item.name}
										onClick={() =>
											setNavigation(
												navigation.map((nav) => {
													if (nav.name === item.name) {
														nav.current = true;
													} else {
														nav.current = false;
													}
													return nav;
												})
											)
										}
									>
										<div
											className={classNames(
												item.current
													? "bg-indigo-800 text-white"
													: "text-indigo-100 hover:bg-indigo-600",
												"group flex items-center px-2 py-2 text-sm font-medium rounded-md"
											)}
										>
											<item.icon
												className="mr-3 h-6 w-6 flex-shrink-0 text-indigo-300"
												aria-hidden="true"
											/>
											{item.name}
										</div>
									</Link>
								))}
							</nav>
						</div>
					</div>
				</div>
				<div className="flex flex-1 flex-col md:pl-64">
					<div className="sticky top-0 z-10 flex h-16 flex-shrink-0 bg-white shadow">
						<button
							type="button"
							className="border-r border-gray-200 px-4 text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500 md:hidden"
							onClick={() => setSidebarOpen(true)}
						>
							<span className="sr-only">Open sidebar</span>
							<Bars3BottomLeftIcon className="h-6 w-6" aria-hidden="true" />
						</button>
						<div className="flex flex-1 justify-between px-4">
							<div className="flex flex-1">
								<form className="flex w-full md:ml-0" action="#" method="GET">
									<label htmlFor="search-field" className="sr-only">
										Search
									</label>
									<div className="relative w-full text-gray-400 focus-within:text-gray-600">
										<div className="pointer-events-none absolute inset-y-0 left-0 flex items-center">
											<MagnifyingGlassIcon
												className="h-5 w-5"
												aria-hidden="true"
											/>
										</div>
										<input
											id="search-field"
											className="block h-full w-full border-transparent py-2 pl-8 pr-3 text-gray-900 placeholder-gray-500 focus:border-transparent focus:placeholder-gray-400 focus:outline-none focus:ring-0 sm:text-sm"
											placeholder="Search"
											type="search"
											name="search"
											onChange={debounce((e: any) => {
												setSearchValue(e.target.value);
											}, 500)}
										/>
									</div>
								</form>
							</div>
						</div>
					</div>
					<div className="fixed w-full mt-16 overflow-y-auto">
						{filteredData.data.length > 0 &&
							filteredData.data.map((item: any, index: number) => (
								<div key={index} className="flex flex-col flex-1">
									<div className="flex flex-col flex-1">
										<div className="bg-white p-5 shadow-sm border-b-2">
											{item.title}
										</div>
									</div>
								</div>
							))}
					</div>
					<main>
						<div className="py-6">
							<div className="mx-auto max-w-7xl px-4 sm:px-6 md:px-8">
								<h1 className="text-2xl font-semibold text-gray-900">
									{props.title}
								</h1>
							</div>
							<div className="mx-auto max-w-7xl px-4 sm:px-6 md:px-8">
								{props.children}
							</div>
						</div>
					</main>
				</div>
			</div>
		</>
	);
}
